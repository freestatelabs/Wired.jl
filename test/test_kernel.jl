using Wired
using BenchmarkTools


function testkernel1()
    # Test calculation of Bfield generated by infinite Wire with infinitesimal cross-section

    println("Testing Ckernel Wire - Infinitesimal Cross-Section")

    Iwire = 105;
    r = 1
    R = 0.5
    wire = Wire{Float32}(Float32.([0,0,-1000]),Float32.([0,0,1000]),Float32(Iwire), Float32(R))
    wires = [wire, wire]
    loc = Float32.([r 0 0; 2*r 0 0])

    B = Wired.biotsavart_ckernel(loc, wires)

    return B, mu0*Iwire/(2*pi*r)

end 

# display(testkernel1())


function createwireproblem(N)
    # Create a Wire source problem that results in N^2 Biot-Savart computations
    # Nnodes = Nwires = N 

    nodes = rand(Wired.precision, N, 3) 
    wires = Vector{Wired.Wire{Wired.precision}}(undef, N) 

    for i in range(1, N) 
        wires[i] = Wire(rand(3), rand(3), randn(), randn())
    end 

    return nodes, wires
end 

Wired.precision = Float32
N = 1000
Nt = 1
nodes, wires = createwireproblem(N);
println("Setting kernel to Julia:")
Wired.kernel="julia"

@btime bfield($nodes, $wires;Nt=Nt);
println("Setting kernel to C:")
Wired.kernel="c"
@btime bfield($nodes, $wires;Nt=Nt);
println("")
